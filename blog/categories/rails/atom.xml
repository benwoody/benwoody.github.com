<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Ben Woodall]]></title>
  <link href="http://benwoody.github.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://benwoody.github.com/"/>
  <updated>2015-03-24T15:12:10-07:00</updated>
  <id>http://benwoody.github.com/</id>
  <author>
    <name><![CDATA[Ben Woodall]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Validating REST queries with Rails]]></title>
    <link href="http://benwoody.github.com/blog/2013/10/20/validating-rest-queries-with-rails/"/>
    <updated>2013-10-20T14:34:00-07:00</updated>
    <id>http://benwoody.github.com/blog/2013/10/20/validating-rest-queries-with-rails</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve recently been working on a few RESTful API&rsquo;s using Rails.  One of the
problems that I keep seeing with end users is that they usually don&rsquo;t read
the documentation very well and make simple mistakes when making specific
requests and queries.  This is easily solved with error handling and
validation of the API.  There are a few gems out there that will handle this
sort of situation for you, but there&rsquo;s already so much in Rails to help you
get this done out of the box.</p>

<!-- more -->


<p>First off, I like keeping my query validations separate by putting them into
app/controllers/validates and then including them at startup.  Each controller
should then have their own validator.</p>

<p>Validating specific queries can be done with ActionController::Parameters.
By creating an ActionController::Parameters object and
passing in the request params, we can then #permit specific queries to be made.</p>

<p>For example, let&rsquo;s say you&rsquo;re building a location aware app that needs to query
via latitude and longitude.  You can build an ActionController::Parameters
object to permit only the ?latitude and ?longitude queries:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Validate</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Location</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;attr_accessor :latitude, :longitude</span>
</span><span class='line'>
</span><span class='line'><span class="sr">def initialize(params={})</span>
</span><span class='line'><span class="sr">  @latitude  = params[:latitude]</span>
</span><span class='line'><span class="sr">  @longitude = params[:longitude]</span>
</span><span class='line'><span class="sr">  ActionController::Parameters.new(params).permit(:latitude,:longitude)</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If a query other than ?latitude=X&amp;longitude=Y are passed, a
ActionController::UnpermittedParameters exception is returned.  We&rsquo;ll need to
rescue_from this exception in order to return our error to the user.  Our
Locations Controller would look something like:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">LocationsController</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ApplicationController</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def index</span>
</span><span class='line'><span class="sr">  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="ss">ActionController</span><span class="p">:</span><span class="ss">:Parameters</span><span class="o">.</span><span class="n">action_on_unpermitted_parameters</span> <span class="o">=</span> <span class="ss">:raise</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  rescue_from(ActionController::UnpermittedParameters) do |pme|&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="p">{</span> <span class="ss">error</span><span class="p">:</span>  <span class="p">{</span> <span class="n">unknown_parameters</span><span class="p">:</span> <span class="n">pme</span><span class="o">.</span><span class="n">params</span> <span class="p">}</span> <span class="p">},</span>
</span><span class='line'>               <span class="ss">status</span><span class="p">:</span> <span class="ss">:bad_request</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>ActionController::Parameters.action_on_unpermitted_parameters is set to :raise
so that errors are thrown instead of logged.</p>

<p>Now, a query such as /locations?latitude=47.60&amp;longitude=-122.33 would return
a valid location for us, but a query containing anything else would return an
error.  For example:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>GET /locations?query<span class="o">=</span>bad&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">{</span>&amp;ldquo;error&amp;rdquo;:<span class="o">{</span>&amp;ldquo;unknown_parameters&amp;rdquo;:<span class="o">[</span>&amp;ldquo;query&amp;rdquo;<span class="o">]}}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So that&rsquo;s pretty awesome. Now end users of the API will know they can only use
specific queries.  But which queries?  It&rsquo;d be nice if there was a way to let
an end user know which queries were needed.  If only Rails had a way to
validate certain values&hellip;</p>

<p>Enter ActiveModel::Validations.  The same validations we use on our
ActiveRecord Models can be used to validate queries we make to the API.</p>

<p>To do this, we need to include ActiveRecord::Validations in our API validations.
Then, you can validate queries just like you validate models.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Validate</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Activity</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;include ActiveModel::Validations</span>
</span><span class='line'>
</span><span class='line'><span class="sr">attr_accessor :latitude, :longitude</span>
</span><span class='line'>
</span><span class='line'><span class="sr">validates :latitude, presence: true, numericality: true</span>
</span><span class='line'><span class="sr">validates :longitude, presence: true, numericality: true</span>
</span><span class='line'>
</span><span class='line'><span class="sr">def initialize(params={})</span>
</span><span class='line'><span class="sr">  @latitude  = params[:latitude]</span>
</span><span class='line'><span class="sr">  @longitude = params[:longitude]</span>
</span><span class='line'><span class="sr">  ActionController::Parameters.new(params).permit(:latitude,:longitude)</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Not only can we validate the presence of a certain query, we can validate that
it must be in a certain format, contain certain items, etc&hellip; Anything you can
validate with ActiveModel::Validations you can now validate in your API.</p>

<p>A few changes need to be made in our Locations Controller in order to make this
work:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">LocationsController</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="n">before_action</span> <span class="ss">:validate_params</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def index</span>
</span><span class='line'><span class="sr">  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">rescue_from</span><span class="p">(</span><span class="ss">ActionController</span><span class="p">:</span><span class="ss">:UnpermittedParameters</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">pme</span><span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;render json: { error:  { unknown_parameters: pme.params } }, </span>
</span><span class='line'><span class="sr">               status: :bad_request</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="kp">private</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def validate_params&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">location</span> <span class="o">=</span> <span class="ss">Validate</span><span class="p">:</span><span class="ss">:Location</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="o">!</span><span class="n">location</span><span class="o">.</span><span class="n">valid?</span>
</span><span class='line'>  <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="p">{</span> <span class="ss">error</span><span class="p">:</span> <span class="n">location</span><span class="o">.</span><span class="n">errors</span> <span class="p">}</span> <span class="ow">and</span> <span class="k">return</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now we get the following errors:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>GET /locations?latitude<span class="o">=</span>near&amp;amp;longitude<span class="o">=</span>far&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">{</span>&amp;ldquo;error&amp;rdquo;:<span class="o">{</span>&amp;ldquo;latitude&amp;rdquo;:<span class="o">[</span>&amp;ldquo;is not a number&amp;rdquo;<span class="o">]</span>,&amp;ldquo;longitude&amp;rdquo;:<span class="o">[</span>&amp;ldquo;is not a number&amp;rdquo;<span class="o">]}}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>There&rsquo;s so much more that you can do with this.  I&rsquo;ve built a demo app and put
it on Github to show off the usage described in this post.  Check it out @
<a href="https://github.com/benwoody/validate_params">https://github.com/benwoody/validate_params</a></p>
]]></content>
  </entry>
  
</feed>
